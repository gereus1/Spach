import SwiftUI
import RealmSwift

struct UserProfileView: View {
    @AppStorage("currentEmail") private var currentEmail = ""
    @State private var user: User?
    @State private var isEditing = false
    @State private var refreshTrigger = false // üîÅ –¢—Ä–∏–≥–µ—Ä –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è

    private let service = RealmService()

    var body: some View {
        ScrollView {
            VStack(spacing: 24) {
                if let u = user {
                    // üî∑ –ê–≤–∞—Ç–∞—Ä
                    if let data = u.avatarData {
                        #if os(iOS)
                        if let ui = UIImage(data: data) {
                            Image(uiImage: ui)
                                .resizable()
                                .scaledToFill()
                                .frame(width: 120, height: 120)
                                .clipShape(Circle())
                                .shadow(radius: 8)
                        }
                        #else
                        if let ns = NSImage(data: data) {
                            Image(nsImage: ns)
                                .resizable()
                                .scaledToFill()
                                .frame(width: 120, height: 120)
                                .clipShape(Circle())
                                .shadow(radius: 8)
                        }
                        #endif
                    }

                    // üî∑ –Ü–º'—è —Ç–∞ email
                    Text(u.name + " " + u.surname)
                        .font(.title2.bold())

                    Text(u.email)
                        .foregroundColor(.secondary)

                    Divider()

                    // üî∑ –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
                    GroupBox(label: Label("–û—Å–æ–±–∏—Å—Ç—ñ –¥–∞–Ω—ñ", systemImage: "person.crop.circle")) {
                        ProfileRow(title: "–í—ñ–∫", value: "\(u.age) —Ä.")
                        ProfileRow(title: "–û—á—ñ–∫—É–≤–∞–Ω–∏–π –¥–æ—Å–≤—ñ–¥ —Ç—Ä–µ–Ω–µ—Ä–∞", value: "\(u.expectedTrainerExperience) —Ä.")
                        ProfileRow(title: "–†–µ–π—Ç–∏–Ω–≥", value: String(format: "%.1f", u.rating))
                        ProfileRow(title: "–¶—ñ–Ω–∞ –∑–∞ —Å–µ—Å—ñ—é", value: "\(Int(u.pricePerSession))‚Ç¥")
                        ProfileRow(title: "–†–æ–∫–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó", value: "\(u.yearsInCategory)")
                    }

                    // üî∑ –£–ø–æ–¥–æ–±–∞–Ω–Ω—è
                    GroupBox(label: Label("–£–ø–æ–¥–æ–±–∞–Ω–Ω—è", systemImage: "slider.horizontal.3")) {
                        ProfileRow(title: "–†–∞–π–æ–Ω–∏", value: u.districts.map { $0.rawValue }.joined(separator: ", "))
                        ProfileRow(title: "–ú–æ–≤–∏", value: u.languages.joined(separator: ", "))
                        Toggle("–ü—Ä–∞—Ü—é—î –∑ –¥—ñ—Ç—å–º–∏", isOn: .constant(u.worksWithChildren)).disabled(true)
                        Toggle("–Ñ —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏", isOn: .constant(u.hasCertificates)).disabled(true)
                    }

                    // üî∑ –ö–Ω–æ–ø–∫–∏
                    HStack(spacing: 16) {
                        Button("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏") {
                            isEditing = true
                        }
                        .buttonStyle(.bordered)

                        Button("–í–∏–π—Ç–∏") {
                            UserDefaults.standard.set(false, forKey: "isLoggedIn")
                        }
                        .buttonStyle(.borderedProminent)
                        .tint(.red)
                    }
                    .padding(.top, 20)

                } else {
                    ProgressView("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è‚Ä¶")
                        .padding(.top, 40)
                }
            }
            .padding()
            .frame(maxWidth: 500)
            .frame(maxWidth: .infinity)
        }
        .onAppear {
            user = service.fetchCurrentUser(email: currentEmail)
        }
        // üîÅ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –ø—ñ—Å–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
        .sheet(isPresented: $isEditing) {
            if let user = user {
                EditUserProfileView(user: user, refreshTrigger: $refreshTrigger)
            }
        }
        .onChange(of: refreshTrigger) {
            user = service.fetchCurrentUser(email: currentEmail)
        }
    }
}

// üî∏ –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–ª—å–Ω–∞ –≤ º—é—à–∫–∞ –¥–ª—è —Å—Ç—Ä—ñ—á–∫–∏ –ø—Ä–æ—Ñ—ñ–ª—é
private struct ProfileRow: View {
    let title: String
    let value: String

    var body: some View {
        HStack {
            Text(title)
                .foregroundColor(.secondary)
            Spacer()
            Text(value)
        }
        .padding(.vertical, 4)
    }
}
